name: Init Bilix Build

on:
  workflow_dispatch:
    inputs:
      Forced-Build:
        description: 'Forced Build'
        type: boolean
        default: true
        required: true

jobs:
  Build-Init:
    name: Init build work
    runs-on: ubuntu-latest
    steps:
      # Check repo
      - name: Checkout code
        uses: actions/checkout@v4
      # Save env
      - name: Initialize variables
        run: |
          echo "latest-commit-id=`awk -F "=" '$1 == "commit.id.latest" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "Nightly-commit-id=`awk -F "=" '$1 == "commit.id.nightly.start" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "Bilix-ver=`awk -F "=" '$1 == "Bilix.ver.cn" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "Bilix-play-ver=`awk -F "=" '$1 == "Bilix.ver.play" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "Bilix-vercode=`awk -F "=" '$1 == "Bilix.vercode.cn" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "Bilix-play-vercode=`awk -F "=" '$1 == "Bilix.vercode.play" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "compare-smallver=`awk -F "=" '$1 == "BiliRoamingX.ver.small" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "compare-bigver=`awk -F "=" '$1 == "BiliRoamingX.ver.big" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "vercode=`awk -F "=" '$1 == "BiliRoamingX.ver.code" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "compare-ver=`awk -F "=" '$1 == "BiliRoamingX.ver.compare" {print $2}' Build.prop`" >> $GITHUB_ENV
          echo "push-changelog=`awk -F "=" '$1 == "push.changelog" {print $2}' Build.prop`" >> $GITHUB_ENV
      # Changelog part
      - name: Save commit info
        run: |
          git clone --recurse-submodules https://github.com/BiliRoamingX/BiliRoamingX.git
          cd ./BiliRoamingX
          git log --oneline ${{ env.latest-commits-id }}...HEAD | sed 's/^[0-9a-f]\{8\} /- /' >  /home/runner/work/Bilix-PreBuilds/Changelog.txt
          git log --oneline ${{ env.Nightly-commit-id }}..HEAD | sed 's/^[0-9a-f]\{8\} /- /' > /home/runner/work/Bilix-PreBuilds/Changelog_Nightly.txt
          git log -1 --format="%H" > /home/runner/work/Bilix-PreBuilds/latest_commit.txt
          version=`awk -F "=" '$1 == "version" {print $2}' gradle.properties`
          commit_count=`git rev-list HEAD --count`
          echo "get-version=$version" >> $GITHUB_ENV
          echo "get-commit_count=$commit_count" >> $GITHUB_ENV
          echo "latest-commit-id=$(cat /home/runner/work/Bilix-PreBuilds/latest_commit.txt)" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE"
          ls -al $GITHUB_WORKSPACE
          cp $GITHUB_WORKSPACE/Build.prop ./Build.prop
      # return nothing to Changelog
      - name: Check if Changelog Empty
        if: ${{ env.push-changelog == 'true' }}
        run: |
          if [ ! -s /home/runner/work/Bilix-PreBuilds/Changelog.txt ]; then
          echo -e " - no change " >> /home/runner/work/Bilix-PreBuilds/Changelog.txt
          fi
          if [ ! -s /home/runner/work/Bilix-PreBuilds/Changelog_Nightly.txt ]; then
          echo -e " - no change " >> /home/runner/work/Bilix-PreBuilds/Changelog_Nightly.txt
          fi
      - name: val empty to Changelog
        if: ${{ env.push-changelog == 'false' }}
        run: |
          echo -e " - no changelog now " >> /home/runner/work/Bilix-PreBuilds/Changelog.txt
          echo -e " - no changelog now " >> /home/runner/work/Bilix-PreBuilds/Changelog_Nightly.txt
      # Get resource
      - name: Get fork resource
        run: |
          cd ./
          git clone https://github.com/sti-233/Bilix-PreBuilds.git
          rm ./Bilix-PreBuilds/Merge-Resource/Build.prop
          cp ./Bilix-PreBuilds/Merge-Resource/* ./BiliRoamingX

      # Recompose resource
      # Merge fork branch sti-233/BiliRoamingX
      - name: Recompose resource
        run: |
          sed -i 's/^.*commit\.id\.latest.*$/commit.id.latest=${{ env.latest-commit-id }}/' ./Build.prop
          sed -i '/    <string name="biliroaming_settings_title">哔哩漫游X<\/string>/c\    <string name="biliroaming_settings_title">BiliRoamingX<\/string>' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings.xml
          sed -i '/    <string name="biliroaming_toast_prefix">哔哩漫游X：<\/string>/c\    <string name="biliroaming_toast_prefix">BiliRoamingX：<\/string>' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings.xml
          sed -i '/    <string name="biliroaming_custom_update_summary">允许APP检查作者官方项目提供的预构建漫游X集成包更新<\/string>/c\    <string name="biliroaming_custom_update_summary">允许APP检查本Fork项目(sti-233)提供的预构建 Bilix 更新<\/string>' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings.xml
          sed -i '/    <string name="biliroaming_usage_hint_message">欢迎使用基于ReVanced方案的修改版哔哩哔哩。以下几点说明请仔细阅读：\\n\\n1. 本修改方案完全开源免费，谨防被骗。\\n2. 本修改版不使用Xposed框架，追求极致性能。\\n3. 请勿在B站任何地方暗示\/提及\/宣传本修改版。\\n4. 设置入口：我的 -> 设置 -> 哔哩漫游X。<\/string>/c\    <string name="biliroaming_usage_hint_message">欢迎使用基于ReVanced方案的修改版哔哩哔哩。以下几点说明请仔细阅读：\\n\\n1. 本修改方案完全开源免费，谨防被骗。\\n2. 本修改版不使用Xposed框架，追求极致性能。\\n3. 请勿在B站任何地方暗示\/提及\/宣传本修改版，否则将会被拉入黑名单，模块所有功能将被停用。\\n4. 设置入口：我的 -> 设置 -> BiliRoamingX。<\/string>' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings.xml
          sed -i 's#    <string name="biliroaming_project_url">https://github.com/BiliRoamingX/BiliRoamingX</string>#    <string name="biliroaming_project_url">https://github.com/sti-233/BiliRoamingX</string>#' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings_raw.xml
          sed -i 's#    <string name="biliroaming_tg_url">https://t.me/bb_show</string>#    <string name="biliroaming_tg_url">https://t.me/Aniruf_x</string>#' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings_raw.xml
          sed -i 's#    <string name="biliroaming_feedback_url">https://github.com/BiliRoamingX/BiliRoamingX/issues/new/choose</string>#    <string name="biliroaming_feedback_url">https://github.com/sti-233/BiliRoamingX/issues/new/choose</string>#' ./BiliRoamingX/patches/src/main/resources/bilibili/host/values/strings_raw.xml
          sed -i 's#    private const val UPGRADE_CHECK_API = "https://api.github.com/repos/BiliRoamingX/BiliRoamingX-PreBuilds/releases"#    private const val UPGRADE_CHECK_API = "https://api.github.com/repos/sti-233/Bilix-PreBuilds/releases"#' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/    var fromSelf = false/c\    var fromSelf = true' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/    var fromSelf = true/a\    var isOsArchArm64 = true' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/    var fromSelf = true/a\    var isPrebuilt = true' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/    fun customUpdate(fromSelf: Boolean = false): Boolean {/c\    fun customUpdate(fromSelf: Boolean = true): Boolean {' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/        return (fromSelf || Settings.CustomUpdate()) && isOsArchArm64 && isPrebuilt/c\        return (fromSelf) && isOsArchArm64 && isPrebuilt' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/        else if (Settings.BlockUpdate())/c\        //else if (Settings.BlockUpdate())' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/            """{"code":-1,"message":"哼，休想要我更新！<(￣︶￣)>"}"""/c\            //"""{"code":-1,"message":"哼，休想要我更新！<(￣︶￣)>"}"""' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/^[[:space:]]*Utils\.isHd()/!b;n;c\        //}' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '0,/        disablePreference(/s//        \/\/disablePreference(/' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '/            key = Settings.CustomUpdate.key,/c\            //key = Settings.CustomUpdate.key,' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '/            { Utils.getString("biliroaming_custom_update_only_64") } to { !isOsArchArm64 },/c\            //{ Utils.getString("biliroaming_custom_update_only_64") } to { !isOsArchArm64 },' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '/            { Utils.getString("biliroaming_custom_update_invalid_sig") } to { !isPrebuilt }/c\            //{ Utils.getString("biliroaming_custom_update_invalid_sig") } to { !isPrebuilt }' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '0,/        )/s//        \/\/)/' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '/\ \ \ \ \ \ \ \ disablePreference(Settings.Skin.key, PrefsDisableReason.AppVersion) {/c\        //disablePreference(Settings.Skin.key, PrefsDisableReason.AppVersion) {' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '/            Utils.isHd()/c\            //Utils.isHd()' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/settings/fragments/MiscFragment.kt
          sed -i '/                        "title" to "新版漫游X集成包",/c\                        "title" to "新版 Bilix",' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/                return mapOf("code" to -1, "message" to "未发现新版漫游X集成包！").toJSONObject()/c\                return mapOf("code" to -1, "message" to "未发现新版 Bilix ！").toJSONObject()' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          sed -i '/                .also { fromSelf = false }/c\                .also { fromSelf = true }' ./BiliRoamingX/integrations/app/src/main/java/app/revanced/bilibili/patches/okhttp/hooks/Upgrade.kt
          echo "Recompose Succeed"

      ## Build BiliRoamingX CI
      # from fork
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/*.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Retrieve version
        run: |
          getvercode=$(echo ${{ env.get-version }} | cut -d '.' -f 1-3)
          vercode=$(echo "$getvercode" | awk -F. '{printf "%d0%d00%d\n", $1, $2, $3}')
          comparevercode=$(echo ${{ env.compare-bigver }} | cut -d '.' -f 1-3)
          comparevercode=$(echo "$comparevercode" | awk -F. '{printf "%d0%d00%d\n", $1, $2, $3}')
          # 判断大版本是否大于记录版本
          if [ "${vercode}" -gt "${comparevercode}" ]; then
            # 是 进行 Release&Nightly
            echo "BiliRoamingX-ver=${{ env.get-version }}" >> $GITHUB_ENV
            echo "Build-Release=true" >> $GITHUB_ENV
            echo "Build-Nightly=true" >> $GITHUB_ENV
            # 存变量
            sed -i 's/^.*BiliRoamingX\.ver\.full.*$/BiliRoamingX.ver.full=${{ env.get-version }}/' ./Build.prop
            sed -i 's/^.*BiliRoamingX\.ver\.big.*$/BiliRoamingX.ver.big=${{ env.get-version }}/' ./Build.prop
            sed -i 's/^.*commit\.id\.nightly\.start.*$/commit.id.nightly.start=$(cat latest_commit.txt)/' ./Build.prop
            sed -i 's/^.*BiliRoamingX\.ver\.code.*$/BiliRoamingX.ver.code=${vercode}/' ./Build.prop
            sed -i 's/^.*temp\.with\.release.*$/temp.with.release=true/' ./Build.prop
            echo "vercode=$vercode" >> $GITHUB_ENV
          else
            # 否 判断小版本是否大于保留版本10次
            if [ $((${{ env.get-commit_count }} - 10)) -ge "${{ env.compare-ver }}" ]; then
              # 是 进行 Release&Nightly
              echo "Build-Release=true" >> $GITHUB_ENV
              echo "Build-Nightly=true" >> $GITHUB_ENV
              echo "BiliRoamingX-ver=${{ env.get-version }}.r${{ env.get-commit_count }}" >> $GITHUB_ENV
              # 存变量
              sed -i 's/^.*BiliRoamingX\.ver\.full.*$/BiliRoamingX.ver.full=${{ env.get-version }}.r${{ env.get-commit_count }}/' ./Build.prop
              sed -i 's/^.*commit\.id\.nightly\.start.*$/commit.id.nightly.start=$(cat latest_commit.txt)/' ./Build.prop
              sed -i 's/^.*BiliRoamingX\.ver\.small.*$/BiliRoamingX.ver.small=${{ env.get-commit_count }}/' ./Build.prop
              sed -i 's/^.*BiliRoamingX\.ver\.big.*$/BiliRoamingX.ver.big=${{ env.get-version }}/' ./Build.prop
              sed -i 's/^.*BiliRoamingX\.ver\.compare.*$/BiliRoamingX.ver.compare=${{ env.get-commit_count }}/' ./Build.prop
              sed -i 's/^.*temp\.with\.release.*$/temp.with.release=true/' ./Build.prop
            else
              # 否 判断小版本是否大于记录版本
              if [ "${{ env.get-commit_count }}" -gt "${{ env.compare-smallver }}" ]; then
                # 是 进行 Nightly
                echo "BiliRoamingX-ver=${{ env.get-version }}.r${{ env.get-commit_count }}" >> $GITHUB_ENV
                echo "Build-Nightly=true" >> $GITHUB_ENV
                # 存变量
                sed -i 's/^.*BiliRoamingX\.ver\.full.*$/BiliRoamingX.ver.full=${{ env.get-version }}.r${{ env.get-commit_count }}/' ./Build.prop
                sed -i 's/^.*BiliRoamingX\.ver\.small.*$/BiliRoamingX.ver.small=${{ env.get-commit_count }}/' ./Build.prop
                sed -i 's/^.*BiliRoamingX\.ver\.big.*$/BiliRoamingX.ver.big=${{ env.get-version }}/' ./Build.prop
                sed -i 's/^.*temp\.with\.release.*$/temp.with.release=false/' ./Build.prop
              else
                # 否 判断是否为强制构建
                if [ "${{ github.event.inputs.Forced-Build }}" == "true" ]; then
                  # 是 进行 Nightly
                  echo "need-Build=true" >> $GITHUB_ENV
                  echo "Build-Nightly=true" >> $GITHUB_ENV
                  sed -i 's/^.*temp\.with\.release.*$/temp.with.release=false/' ./Build.prop
                else
                  # 否 不构建
                  echo "need-Build=false" >> $GITHUB_ENV
                fi
              fi
            fi
          fi

      - name: Build with gradle
        if: ${{ env.need-Build != 'false' || env.need-Build == '' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          cd ./BiliRoamingX
          ./gradlew --no-daemon -Dorg.gradle.jvmargs=-Xmx2g -Pversion=${{ env.BiliRoamingX-ver }} dist

      - name: Upload CI Resource
        uses: actions/upload-artifact@v4
        if: success() && ( env.need-Build != 'false' || env.need-Build == '' )
        with:
          name: BiliRoamingX-${{ env.BiliRoamingX-ver }}
          path: /home/runner/work/Bilix-PreBuilds/Bilix-PreBuilds/BiliRoamingX/build/*

      - name: Upload Build Resource
        uses: actions/upload-artifact@v4
        if: success() && ( env.need-Build != 'false' || env.need-Build == '' )
        with:
          name: Build_resource
          path: |
            /home/runner/work/Bilix-PreBuilds/Bilix-PreBuilds/Build.prop
            /home/runner/work/Bilix-PreBuilds/Changelog.txt
            /home/runner/work/Bilix-PreBuilds/Changelog_Nightly.txt

      ## Init Build work
      # Build Nightly
      - name: Init Build Nightly
        if: ${{ env.need-Build != 'false' || env.need-Build == '' && env.Build-Nightly == 'true'  }}
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.CUSTOM_GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"Nightly-Build"}'
